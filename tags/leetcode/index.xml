<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>leetcode on 养猪场</title>
    <link>https://zhixiangyuan.github.io/tags/leetcode/</link>
    <description>Recent content in leetcode on 养猪场</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>yuanzx</copyright>
    <lastBuildDate>Mon, 11 Nov 2019 08:22:38 +0800</lastBuildDate>
    
	<atom:link href="https://zhixiangyuan.github.io/tags/leetcode/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Leetcode: 38 报数</title>
      <link>https://zhixiangyuan.github.io/2019/11/11/leetcode-38-%E6%8A%A5%E6%95%B0/</link>
      <pubDate>Mon, 11 Nov 2019 08:22:38 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/11/11/leetcode-38-%E6%8A%A5%E6%95%B0/</guid>
      <description>1 题目 报数 2 解 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class Solution { /** 编译正则，按照重复的数字分组 */ private Pattern pattern = Pattern.compile(&amp;#34;(\\d)\\1*&amp;#34;); public String countAndSay(int n) { if (n == 1) return &amp;#34;1&amp;#34;; StringBuilder result = new StringBuilder(); result.append(&amp;#34;1&amp;#34;); for</description>
    </item>
    
    <item>
      <title>Leetcode: 450 删除二叉搜索树中的节点</title>
      <link>https://zhixiangyuan.github.io/2019/10/21/leetcode-450-%E5%88%A0%E9%99%A4%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/</link>
      <pubDate>Mon, 21 Oct 2019 10:13:37 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/21/leetcode-450-%E5%88%A0%E9%99%A4%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/</guid>
      <description>1 题目 二叉搜索树中的搜索 2 解 2.1 我的解 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52</description>
    </item>
    
    <item>
      <title>Leetcode: 912 排序数组</title>
      <link>https://zhixiangyuan.github.io/2019/10/18/leetcode-912-%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84/</link>
      <pubDate>Fri, 18 Oct 2019 08:35:40 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/18/leetcode-912-%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84/</guid>
      <description>1 题目 排序数组 2 解 2.1 我的解 2.1.1 归并排序 时间复杂度: O(nlogn) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 class Solution { public</description>
    </item>
    
    <item>
      <title>Leetcode: 701 二叉搜索树中的插入操作</title>
      <link>https://zhixiangyuan.github.io/2019/10/08/leetcode-701-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E6%8F%92%E5%85%A5%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Tue, 08 Oct 2019 08:05:16 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/08/leetcode-701-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E6%8F%92%E5%85%A5%E6%93%8D%E4%BD%9C/</guid>
      <description>1 题目 二叉搜索树中的插入操作 2 解 2.1 我的解 时间复杂度: O(logn) 空间复杂度: O(1) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 /** * Definition for</description>
    </item>
    
    <item>
      <title>Leetcode: 700 二叉搜索树中的搜索</title>
      <link>https://zhixiangyuan.github.io/2019/09/29/leetcode-700-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E6%90%9C%E7%B4%A2/</link>
      <pubDate>Sun, 29 Sep 2019 08:01:03 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/09/29/leetcode-700-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E6%90%9C%E7%B4%A2/</guid>
      <description>1 题目 二叉搜索树中的搜索 2 解 2.1 我的解 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode(int x) { val = x; } * } */ class Solution</description>
    </item>
    
    <item>
      <title>Leetcode: 27 移除元素</title>
      <link>https://zhixiangyuan.github.io/2019/09/28/leetcode-27-%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/</link>
      <pubDate>Sat, 28 Sep 2019 07:57:58 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/09/28/leetcode-27-%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/</guid>
      <description>1 题目 移除元素 2 解 2.1 我的解 时间复杂度: O(n) 空间复杂度: O(1) 1 2 3 4 5 6 7 8 9 10 11 12 13 class Solution { public int removeElement(int[] nums, int val) { int newIndex = 0; int oldIndex = 0; for (; oldIndex &amp;lt; nums.length; oldIndex++) { if (val != nums[oldIndex]) {</description>
    </item>
    
    <item>
      <title>Leetcode: 26 删除排序数组中的重复项</title>
      <link>https://zhixiangyuan.github.io/2019/09/27/leetcode-26-%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/</link>
      <pubDate>Fri, 27 Sep 2019 08:12:28 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/09/27/leetcode-26-%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/</guid>
      <description>1 题目 删除排序数组中的重复项 2 解 2.1 我的解 时间复杂度: O(n) 空间复杂度: O(1) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Solution { public int removeDuplicates(int[] nums) { int oldIndex = 1; int newIndex = 1; for (; oldIndex &amp;lt; nums.length; oldIndex++)</description>
    </item>
    
    <item>
      <title>Leetcode: 3 无重复字符的最长子串</title>
      <link>https://zhixiangyuan.github.io/2019/09/26/leetcode-3-%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/</link>
      <pubDate>Thu, 26 Sep 2019 07:56:34 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/09/26/leetcode-3-%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/</guid>
      <description>1 题目 无重复字符的最长子串 2 解 2.1 我的解 时间复杂度: O(n) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class Solution { public int lengthOfLongestSubstring(String s) { char[] result = s.toCharArray(); HashMap&amp;lt;Object, Integer&amp;gt; map = new HashMap(); int maxLength = 0;</description>
    </item>
    
    <item>
      <title>Leetcode: 173 二叉搜索树迭代器</title>
      <link>https://zhixiangyuan.github.io/2019/09/25/leetcode-173-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E8%BF%AD%E4%BB%A3%E5%99%A8/</link>
      <pubDate>Wed, 25 Sep 2019 07:46:04 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/09/25/leetcode-173-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E8%BF%AD%E4%BB%A3%E5%99%A8/</guid>
      <description>1 题目 二叉搜索树迭代器 2 解 2.1 我的解 先保存树左边的节点进队列，当队列空了再让后边的节点进队列，这样似乎还是没有满足使用 O(h) 的内存空间 h 是树的高度</description>
    </item>
    
    <item>
      <title>Leetcode: 98 验证二叉搜索树</title>
      <link>https://zhixiangyuan.github.io/2019/09/24/leetcode-98-%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</link>
      <pubDate>Tue, 24 Sep 2019 07:09:35 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/09/24/leetcode-98-%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</guid>
      <description>1 题目 验证二叉搜索树 2 解 2.1 我的解 时间复杂度: O(n) 空间复杂度: O(n) 本解中的 list 可以换成 stack，只存储上一个节点数，这样就能节省空间。 1 2 3 4 5 6</description>
    </item>
    
    <item>
      <title>Leetcode: 401 二进制手表</title>
      <link>https://zhixiangyuan.github.io/2019/09/23/leetcode-401-%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%89%8B%E8%A1%A8/</link>
      <pubDate>Mon, 23 Sep 2019 07:20:33 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/09/23/leetcode-401-%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%89%8B%E8%A1%A8/</guid>
      <description>1 题目 二进制手表 2 解 2.1 别人的解 很巧妙的解法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class Solution { public List&amp;lt;String&amp;gt; readBinaryWatch(int num) { List&amp;lt;String&amp;gt; result = new ArrayList&amp;lt;&amp;gt;(); // 直接遍历 0:00 -&amp;gt; 12:00 每个时</description>
    </item>
    
    <item>
      <title>Leetcode: 151 最小栈</title>
      <link>https://zhixiangyuan.github.io/2019/09/22/leetcode-151-%E6%9C%80%E5%B0%8F%E6%A0%88/</link>
      <pubDate>Sun, 22 Sep 2019 07:43:01 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/09/22/leetcode-151-%E6%9C%80%E5%B0%8F%E6%A0%88/</guid>
      <description>1 题目 最小栈 2 解 2.1 我的解 题意要求的常数时间 getMin，只需要在程序中添加一个最小值成员变量，在每次 push 时判断是不是更小，若更小则将最小值更新</description>
    </item>
    
    <item>
      <title>Leetcode: 136 只出现一次的数字</title>
      <link>https://zhixiangyuan.github.io/2019/09/20/leetcode-136-%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97/</link>
      <pubDate>Fri, 20 Sep 2019 06:45:42 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/09/20/leetcode-136-%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97/</guid>
      <description>1 题目 只出现一次的数字 2 解 2.1 我的解 2.1.1 HashSet 解 时间复杂度: O(n) 1 2 3 4 5 6 7 8 9 10 11 12 13 class Solution { public int singleNumber(int[] nums) { HashSet hashset = new HashSet(); for (int i = 0; i &amp;lt; nums.length; i++) { if (hashset.contains(nums[i])) { hashset.remove(nums[i]); } else {</description>
    </item>
    
    <item>
      <title>如何在 Leetcode 上调试代码</title>
      <link>https://zhixiangyuan.github.io/2019/09/19/%E5%A6%82%E4%BD%95%E5%9C%A8-leetcode-%E4%B8%8A%E8%B0%83%E8%AF%95%E4%BB%A3%E7%A0%81/</link>
      <pubDate>Thu, 19 Sep 2019 09:39:08 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/09/19/%E5%A6%82%E4%BD%95%E5%9C%A8-leetcode-%E4%B8%8A%E8%B0%83%E8%AF%95%E4%BB%A3%E7%A0%81/</guid>
      <description>最近经常在 leetcode 上面刷题，不过发现在上面写的代码如果遇到一些 bug 只能肉眼 debug，如果 不能肉眼 debug 出来就比较难受了，还要打开 ide 真实模拟一下。不过今</description>
    </item>
    
    <item>
      <title>Leetcode: 21 合并两个有序链表</title>
      <link>https://zhixiangyuan.github.io/2019/09/19/leetcode-21-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Thu, 19 Sep 2019 07:54:04 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/09/19/leetcode-21-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/</guid>
      <description>1 题目 合并两个有序链表 2 解 2.1 我的解 最近什么情况，为什么写出来的解又臭又长，可能是我又想写递归，又写不出简洁的递归的原因吧。 1 2 3 4 5 6 7 8 9</description>
    </item>
    
    <item>
      <title>Leetcode: 112 路径总和</title>
      <link>https://zhixiangyuan.github.io/2019/09/18/leetcode-112-%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8C/</link>
      <pubDate>Wed, 18 Sep 2019 06:55:44 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/09/18/leetcode-112-%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8C/</guid>
      <description>1 题目 路径总和 2 解 2.1 我的解 空间复杂度: O(log(n)) 时间复杂度: O(n) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode</description>
    </item>
    
    <item>
      <title>Leetcode: 101 对称二叉树</title>
      <link>https://zhixiangyuan.github.io/2019/09/17/leetcode-101-%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91/</link>
      <pubDate>Tue, 17 Sep 2019 07:47:27 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/09/17/leetcode-101-%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91/</guid>
      <description>1 题目 对称二叉树 2 解 2.1 我的解 思路拿取对称的节点进行比较，相同返回 true，不相同返回 false 时间复杂度: O(n) 空间复杂度: O(1) 1 2 3 4 5 6 7 8 9 10 11 12 13</description>
    </item>
    
    <item>
      <title>Leetcode: 104 二叉树的最大深度</title>
      <link>https://zhixiangyuan.github.io/2019/09/16/leetcode-104-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6/</link>
      <pubDate>Mon, 16 Sep 2019 07:08:02 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/09/16/leetcode-104-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6/</guid>
      <description>1 题目 二叉树的最大深度 2 解 2.1 我的解 时间复杂度: O(n) 空间复杂度: O(1) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 /** * Definition for a binary tree node. * public class</description>
    </item>
    
    <item>
      <title>Leetcode: 20 有效的括号</title>
      <link>https://zhixiangyuan.github.io/2019/09/15/leetcode-20-%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/</link>
      <pubDate>Sun, 15 Sep 2019 07:13:48 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/09/15/leetcode-20-%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/</guid>
      <description>1 题目 有效的括号 2 解 2.1 我的解 时间复杂度 O(n) 空间复杂度 O(n) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 class Solution { public boolean isValid(String s) { Stack</description>
    </item>
    
    <item>
      <title>Leetcode: 2 两数相加</title>
      <link>https://zhixiangyuan.github.io/2019/09/14/leetcode-2-%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</link>
      <pubDate>Sat, 14 Sep 2019 09:14:06 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/09/14/leetcode-2-%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</guid>
      <description>1 题目 两数相加 2 解 2.1 我的解 时间复杂度: O(n) 空间复杂度: O(n) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43</description>
    </item>
    
    <item>
      <title>Leetcode: 146 LRU 缓存机制</title>
      <link>https://zhixiangyuan.github.io/2019/09/13/leetcode-146-lru-%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Fri, 13 Sep 2019 09:20:52 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/09/13/leetcode-146-lru-%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</guid>
      <description>1 题目 LRU 缓存机制 2 解 2.1 我的解 没解出来 2.2 官方解法 厉害了，对 LinkedhashMap 稍加改造就完成了这个效果，强 LRU = Last recent used，最近被使用的缓存不要被覆盖掉。 1 2 3</description>
    </item>
    
    <item>
      <title>Leetcode: 102 二叉树的层序遍历</title>
      <link>https://zhixiangyuan.github.io/2019/09/12/leetcode-102-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/</link>
      <pubDate>Thu, 12 Sep 2019 08:08:15 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/09/12/leetcode-102-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/</guid>
      <description>1 题目 二叉树的前序遍历 2 解 2.1 我的解 由于他要对每一层进行分层，所以我想的就是通过 List&amp;lt;List&amp;lt;TreeNode&amp;gt;&amp;gt; 去分层，但是我这个解跑出来的效果看上去时间复杂度和空间复杂度</description>
    </item>
    
    <item>
      <title>Leetcode: 145 二叉树的后序遍历</title>
      <link>https://zhixiangyuan.github.io/2019/09/12/leetcode-145-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86/</link>
      <pubDate>Thu, 12 Sep 2019 07:21:13 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/09/12/leetcode-145-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86/</guid>
      <description>1 题目 二叉树的后序遍历 2 解 2.1 我的解 时间复杂度 O(n) 空间复杂度 O(n) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode</description>
    </item>
    
    <item>
      <title>Leetcode: 94 二叉树的中序遍历</title>
      <link>https://zhixiangyuan.github.io/2019/09/12/leetcode-94-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/</link>
      <pubDate>Thu, 12 Sep 2019 07:17:14 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/09/12/leetcode-94-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/</guid>
      <description>1 题目 二叉树的中序遍历 2 解 2.1 我的解 时间复杂度 O(n) // 每个节点遍历一次所以是 O(n) 空间复杂度 O(n) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 /** * Definition for a</description>
    </item>
    
    <item>
      <title>Leetcode: 144 二叉树的前序遍历</title>
      <link>https://zhixiangyuan.github.io/2019/09/12/leetcode-144-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86/</link>
      <pubDate>Thu, 12 Sep 2019 07:09:30 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/09/12/leetcode-144-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86/</guid>
      <description>1 题目 二叉树的前序遍历 2 解 2.1 我的解 时间复杂度 O(n) 空间复杂度 O(n) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode</description>
    </item>
    
    <item>
      <title>Leetcode: 70 爬楼梯</title>
      <link>https://zhixiangyuan.github.io/2019/09/10/leetcode-70-%E7%88%AC%E6%A5%BC%E6%A2%AF/</link>
      <pubDate>Tue, 10 Sep 2019 09:43:30 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/09/10/leetcode-70-%E7%88%AC%E6%A5%BC%E6%A2%AF/</guid>
      <description>1 题目 爬楼梯 2 解 2.1 我的解 没解出来 2.2 官方题解 2.2.1 暴力法 通过递归的方式模拟爬楼梯，不过这个方法在 leetcode 上面跑会超时 时间复杂度: O(\(2^n\)) 空间复杂度: O(1) 1 2 3 4</description>
    </item>
    
    <item>
      <title>Leetcode: 53 最大子序和</title>
      <link>https://zhixiangyuan.github.io/2019/09/09/leetcode-53-%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C/</link>
      <pubDate>Mon, 09 Sep 2019 08:17:52 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/09/09/leetcode-53-%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C/</guid>
      <description>1 题目 最大子序和 2 解 2.1 我的解 双重循环遍历，把所有可能性都算一遍 时间复杂度: O(\(n^2\)) 空间复杂度: O(1) 执行时间: 95ms 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19</description>
    </item>
    
    <item>
      <title>Leetcode: 1115 交替打印 FooBar</title>
      <link>https://zhixiangyuan.github.io/2019/08/14/leetcode-1115-%E4%BA%A4%E6%9B%BF%E6%89%93%E5%8D%B0-foobar/</link>
      <pubDate>Wed, 14 Aug 2019 20:54:44 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/08/14/leetcode-1115-%E4%BA%A4%E6%9B%BF%E6%89%93%E5%8D%B0-foobar/</guid>
      <description>1 题目 交替打印 FooBar 2 解 2.1 我的解 思路，先打印 Foo，然后通知另一个线程打印 Bar 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 class</description>
    </item>
    
    <item>
      <title>Leetcode: 1114 按序打印</title>
      <link>https://zhixiangyuan.github.io/2019/08/13/leetcode-1114-%E6%8C%89%E5%BA%8F%E6%89%93%E5%8D%B0/</link>
      <pubDate>Tue, 13 Aug 2019 11:05:30 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/08/13/leetcode-1114-%E6%8C%89%E5%BA%8F%E6%89%93%E5%8D%B0/</guid>
      <description>1 题目 按序打印 2 解 2.1 我的解 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 class Foo { // 题目确保使用单例模式 public Foo() { } private boolean</description>
    </item>
    
    <item>
      <title>Leetcode: 1 两数之和</title>
      <link>https://zhixiangyuan.github.io/2019/07/02/leetcode-1-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</link>
      <pubDate>Tue, 02 Jul 2019 20:23:42 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/07/02/leetcode-1-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</guid>
      <description>1 题目 给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标。 你可以假设每种输入只会对应</description>
    </item>
    
  </channel>
</rss>