<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MySQL on 养猪场</title>
    <link>https://zhixiangyuan.github.io/tags/mysql/</link>
    <description>Recent content in MySQL on 养猪场</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>yuanzx</copyright>
    <lastBuildDate>Sun, 19 Jan 2020 17:02:13 +0800</lastBuildDate>
    
	<atom:link href="https://zhixiangyuan.github.io/tags/mysql/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SQL 优化小记</title>
      <link>https://zhixiangyuan.github.io/2020/01/19/sql-%E4%BC%98%E5%8C%96%E5%B0%8F%E8%AE%B0/</link>
      <pubDate>Sun, 19 Jan 2020 17:02:13 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2020/01/19/sql-%E4%BC%98%E5%8C%96%E5%B0%8F%E8%AE%B0/</guid>
      <description>本篇文章使用的建表语句以及其创建数据的语句 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 DROP TABLE IF EXISTS employees; CREATE TABLE `employees` ( `id` INT ( 11 ) NOT NULL AUTO_INCREMENT, `name` VARCHAR ( 24 ) NOT NULL DEFAULT &amp;#39;&amp;#39; COMMENT &amp;#39</description>
    </item>
    
    <item>
      <title>Explain 小记</title>
      <link>https://zhixiangyuan.github.io/2020/01/18/explain-%E5%B0%8F%E8%AE%B0/</link>
      <pubDate>Sat, 18 Jan 2020 16:44:45 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2020/01/18/explain-%E5%B0%8F%E8%AE%B0/</guid>
      <description>explain 工具的作用是用于返回 sql 的执行计划，帮助开发人员优化 sql。 以下是本文使用的数据表的建表语句 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24</description>
    </item>
    
    <item>
      <title>事务的 ACDI 特性</title>
      <link>https://zhixiangyuan.github.io/2020/01/17/%E4%BA%8B%E5%8A%A1%E7%9A%84-acdi-%E7%89%B9%E6%80%A7/</link>
      <pubDate>Fri, 17 Jan 2020 09:33:42 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2020/01/17/%E4%BA%8B%E5%8A%A1%E7%9A%84-acdi-%E7%89%B9%E6%80%A7/</guid>
      <description>ACDI 分别是：原子性 (atomicity)，一致性 (consistency)，隔离性 (isolation)，持久性 (durability)。 原子</description>
    </item>
    
    <item>
      <title>InnoDB 支持的索引分类</title>
      <link>https://zhixiangyuan.github.io/2020/01/17/innodb-%E6%94%AF%E6%8C%81%E7%9A%84%E7%B4%A2%E5%BC%95%E5%88%86%E7%B1%BB/</link>
      <pubDate>Fri, 17 Jan 2020 00:58:44 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2020/01/17/innodb-%E6%94%AF%E6%8C%81%E7%9A%84%E7%B4%A2%E5%BC%95%E5%88%86%E7%B1%BB/</guid>
      <description>1 从数据结构角度看 1.1 B+Tree 索引 B+Tree 的特点便是以树的形式组织数据，同时将所有数据均放到叶子结点，最后在叶子结点上构造有序链表，这种结构使得查询数据和</description>
    </item>
    
    <item>
      <title>如何在 MySQL 中快速生成一张亿级数据量的表</title>
      <link>https://zhixiangyuan.github.io/2020/01/16/%E5%A6%82%E4%BD%95%E5%9C%A8-mysql-%E4%B8%AD%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90%E4%B8%80%E5%BC%A0%E4%BA%BF%E7%BA%A7%E6%95%B0%E6%8D%AE%E9%87%8F%E7%9A%84%E8%A1%A8/</link>
      <pubDate>Thu, 16 Jan 2020 09:08:28 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2020/01/16/%E5%A6%82%E4%BD%95%E5%9C%A8-mysql-%E4%B8%AD%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90%E4%B8%80%E5%BC%A0%E4%BA%BF%E7%BA%A7%E6%95%B0%E6%8D%AE%E9%87%8F%E7%9A%84%E8%A1%A8/</guid>
      <description>本文使用的测试硬件是树莓派4B 4G 版本 在网上找了一下，发现有两种方法，一种是弄一张内存表，用存储过程 向内存表中插入数据，然后再将数据写回数据表</description>
    </item>
    
    <item>
      <title>使用 JDBC 连接数据库的样例代码</title>
      <link>https://zhixiangyuan.github.io/2020/01/15/%E4%BD%BF%E7%94%A8-jdbc-%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%A0%B7%E4%BE%8B%E4%BB%A3%E7%A0%81/</link>
      <pubDate>Wed, 15 Jan 2020 20:00:34 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2020/01/15/%E4%BD%BF%E7%94%A8-jdbc-%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%A0%B7%E4%BE%8B%E4%BB%A3%E7%A0%81/</guid>
      <description>1 pom 中引入依赖 1 2 3 4 5 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt; &amp;lt;scope&amp;gt;runtime&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; 2 样例代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 public class Main { static final String DB_URL = &amp;#34;jdbc:mysql://localhost:3306/test&amp;#34;; static final String USER = &amp;#34;root&amp;#34;; static final String PASS = &amp;#34;123456&amp;#34;; public static void main(String[] args) { try</description>
    </item>
    
    <item>
      <title>查看 mysql 表相关信息</title>
      <link>https://zhixiangyuan.github.io/2020/01/13/%E6%9F%A5%E7%9C%8B-mysql-%E8%A1%A8%E7%9B%B8%E5%85%B3%E4%BF%A1%E6%81%AF/</link>
      <pubDate>Mon, 13 Jan 2020 15:30:42 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2020/01/13/%E6%9F%A5%E7%9C%8B-mysql-%E8%A1%A8%E7%9B%B8%E5%85%B3%E4%BF%A1%E6%81%AF/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 -- \G 表示的意思是数据以列的方式显示 -- 需要注意的是在 navicat 的命令行里面这样用会报错 -- 通过以下语句查看表的相关信息 -- 查看所有表的</description>
    </item>
    
    <item>
      <title>删除数据库时报错的解决方案</title>
      <link>https://zhixiangyuan.github.io/2019/11/24/%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE%E5%BA%93%E6%97%B6%E6%8A%A5%E9%94%99%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</link>
      <pubDate>Sun, 24 Nov 2019 13:01:39 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/11/24/%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE%E5%BA%93%E6%97%B6%E6%8A%A5%E9%94%99%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</guid>
      <description>今天删除数据库的时候出现了一个诡异的报错，报错如下所示 1 1010 - Error dropping database (can&amp;#39;t rmdir &amp;#39;./apolloportaldb&amp;#39;, errno: 39) 网上查了一下，解决方案是直接去手动删除文件夹中的内容，我是 docker 启动</description>
    </item>
    
    <item>
      <title>MySQL 中的数据类型</title>
      <link>https://zhixiangyuan.github.io/2019/11/03/mysql-%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Sun, 03 Nov 2019 01:02:34 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/11/03/mysql-%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>1 串数据类型 字符串数据类型必须括在引号内（通常为单引号，使用双引号也行）。 数据类型 说明 CHAR 1～255 个字符的定长串。它的长度必须在创建时指定，</description>
    </item>
    
    <item>
      <title>改善 MySQL 性能的建议</title>
      <link>https://zhixiangyuan.github.io/2019/11/03/%E6%94%B9%E5%96%84-mysql-%E6%80%A7%E8%83%BD%E7%9A%84%E5%BB%BA%E8%AE%AE/</link>
      <pubDate>Sun, 03 Nov 2019 00:51:01 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/11/03/%E6%94%B9%E5%96%84-mysql-%E6%80%A7%E8%83%BD%E7%9A%84%E5%BB%BA%E8%AE%AE/</guid>
      <description>MySQL（与所有 DBMS 一样）具有特定的硬件建议。在学习和研究MySQL时，使用任何旧的计算机作为服务器都可以。但对用于生产的服务器来说，应该坚</description>
    </item>
    
    <item>
      <title>MySQL 中的用户和权限管理</title>
      <link>https://zhixiangyuan.github.io/2019/11/02/mysql-%E4%B8%AD%E7%9A%84%E7%94%A8%E6%88%B7%E5%92%8C%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/</link>
      <pubDate>Sat, 02 Nov 2019 23:55:47 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/11/02/mysql-%E4%B8%AD%E7%9A%84%E7%94%A8%E6%88%B7%E5%92%8C%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/</guid>
      <description>1 用户管理 MySql 用户账号存储在名为 mysql 的 MySQL 数据库中，一般不需要直接访问 mysql 数据库和表，通过相关命令即可完成操作。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18</description>
    </item>
    
    <item>
      <title>MySQL 查看支持的字符集和校对顺序</title>
      <link>https://zhixiangyuan.github.io/2019/11/02/mysql-%E6%9F%A5%E7%9C%8B%E6%94%AF%E6%8C%81%E7%9A%84%E5%AD%97%E7%AC%A6%E9%9B%86%E5%92%8C%E6%A0%A1%E5%AF%B9%E9%A1%BA%E5%BA%8F/</link>
      <pubDate>Sat, 02 Nov 2019 23:38:04 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/11/02/mysql-%E6%9F%A5%E7%9C%8B%E6%94%AF%E6%8C%81%E7%9A%84%E5%AD%97%E7%AC%A6%E9%9B%86%E5%92%8C%E6%A0%A1%E5%AF%B9%E9%A1%BA%E5%BA%8F/</guid>
      <description>1 2 3 4 5 -- 展示 MySQL 支持的字符集 SHOW CHARACTER SET; -- 展示 MySQL 支持的所有校对顺序 SHOW COLLATION;</description>
    </item>
    
    <item>
      <title>MySQL 事务管理</title>
      <link>https://zhixiangyuan.github.io/2019/11/02/mysql-%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/</link>
      <pubDate>Sat, 02 Nov 2019 21:21:35 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/11/02/mysql-%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/</guid>
      <description>1 事务管理 以下的语句是连接隔离的，每个连接都有自己的环境。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 -- 开始事务 START TRANSACTION; -- 事务回滚 ROLLBACK; -- 提交事务</description>
    </item>
    
    <item>
      <title>MySQL 存储过程的创建、执行和删除</title>
      <link>https://zhixiangyuan.github.io/2019/11/01/mysql-%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E7%9A%84%E5%88%9B%E5%BB%BA%E6%89%A7%E8%A1%8C%E5%92%8C%E5%88%A0%E9%99%A4/</link>
      <pubDate>Fri, 01 Nov 2019 18:39:30 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/11/01/mysql-%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E7%9A%84%E5%88%9B%E5%BB%BA%E6%89%A7%E8%A1%8C%E5%92%8C%E5%88%A0%E9%99%A4/</guid>
      <description>对于现在大多数的互联网应用，数据库的瓶颈在于数据库的读写，所以需要数据库尽快完成读写操作，业务操作放到服务器上做。 1 创建存储过程 1 2 3 4 5 6</description>
    </item>
    
    <item>
      <title>MySQL 视图的创建和删除</title>
      <link>https://zhixiangyuan.github.io/2019/11/01/mysql-%E8%A7%86%E5%9B%BE%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E5%88%A0%E9%99%A4/</link>
      <pubDate>Fri, 01 Nov 2019 16:45:48 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/11/01/mysql-%E8%A7%86%E5%9B%BE%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E5%88%A0%E9%99%A4/</guid>
      <description>视图便是临时表，在每次查看视图的时候执行指定的 SQL 语句。 1 视图的创建 1 2 -- 创建视图 CREATE VIEW &amp;lt;$view_name&amp;gt; AS &amp;lt;SELECT ...&amp;gt;; 2 视图的删除 1 2 -- 删除视图 DROP VIEW &amp;lt;$view_name&amp;gt;; 3 对视图中数据的</description>
    </item>
    
    <item>
      <title>MySQL 创建表、修改表和删除表</title>
      <link>https://zhixiangyuan.github.io/2019/10/31/mysql-%E5%88%9B%E5%BB%BA%E8%A1%A8%E4%BF%AE%E6%94%B9%E8%A1%A8%E5%92%8C%E5%88%A0%E9%99%A4%E8%A1%A8/</link>
      <pubDate>Thu, 31 Oct 2019 15:22:49 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/31/mysql-%E5%88%9B%E5%BB%BA%E8%A1%A8%E4%BF%AE%E6%94%B9%E8%A1%A8%E5%92%8C%E5%88%A0%E9%99%A4%E8%A1%A8/</guid>
      <description>1 创建表 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 CREATE TABLE [IF NOT EXISTS] &amp;lt;table_name&amp;gt; ( &amp;lt;field_name&amp;gt; &amp;lt;data_type&amp;gt;[size] [NOT NULL|NULL] [DEFAULT &amp;lt;value&amp;gt;] [AUTO_INCREMENT] [COMMENT &amp;lt;comment&amp;gt;] [CHARACTER SET &amp;lt;charset&amp;gt;] [COLLATE &amp;lt;collate&amp;gt;] [UNSIGNED], [field_name data_type]...</description>
    </item>
    
    <item>
      <title>MySQL INSERT 与 REPLACE 的使用</title>
      <link>https://zhixiangyuan.github.io/2019/10/31/mysql-insert-%E4%B8%8E-replace-%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Thu, 31 Oct 2019 10:05:58 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/31/mysql-insert-%E4%B8%8E-replace-%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>1 INSERT 语句的使用 1.1 插入单条数据 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 # 查看表结构 mysql&amp;gt; SELECT * FROM prods; +----+------------+ | id | prod_name | +----+------------+ | 1 | apple | | 2 | banana | | 3</description>
    </item>
    
    <item>
      <title>MySQL 中的连接查询</title>
      <link>https://zhixiangyuan.github.io/2019/10/30/mysql-%E4%B8%AD%E7%9A%84%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2/</link>
      <pubDate>Wed, 30 Oct 2019 14:02:29 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/30/mysql-%E4%B8%AD%E7%9A%84%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2/</guid>
      <description>1 交叉连接：CROSS JOIN 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # 交叉连接使用这个数据表 mysql&amp;gt; SELECT * FROM orders; +----+---------+ | id | cust_id | +----+---------+ | 1 | 1 | | 2 | NULL | +----+---------+ mysql&amp;gt; SELECT * FROM customers; +----+-----------------+---------------+ | id</description>
    </item>
    
    <item>
      <title>MySQL 中子查询的使用</title>
      <link>https://zhixiangyuan.github.io/2019/10/30/mysql-%E4%B8%AD%E5%AD%90%E6%9F%A5%E8%AF%A2%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Wed, 30 Oct 2019 10:43:43 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/30/mysql-%E4%B8%AD%E5%AD%90%E6%9F%A5%E8%AF%A2%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>1 测试用例使用的数据表 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 # 客户表，存储客户的信息 mysql&amp;gt; SELECT * FROM</description>
    </item>
    
    <item>
      <title>MySQL 中的聚集函数</title>
      <link>https://zhixiangyuan.github.io/2019/10/29/mysql-%E4%B8%AD%E7%9A%84%E8%81%9A%E9%9B%86%E5%87%BD%E6%95%B0/</link>
      <pubDate>Tue, 29 Oct 2019 11:08:19 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/29/mysql-%E4%B8%AD%E7%9A%84%E8%81%9A%E9%9B%86%E5%87%BD%E6%95%B0/</guid>
      <description>1 MySQL 中的聚集函数 函数 说明 AVG([DISTINCT or ALL] &amp;lt;field&amp;gt;) 返回某列的平均值 COUNT([DISTINCT or ALL] &amp;lt;field&amp;gt;) 返回某列的行数 MAX(&amp;lt;field&amp;gt;) 返回某列的最大值 MIN(&amp;lt;field&amp;gt;) 返回某列的最小值 SUM([DISTINCT or ALL] &amp;lt;field&amp;gt;) 返回某列值之和 DISTINCT 参数起到去</description>
    </item>
    
    <item>
      <title>MySQL 数值处理函数</title>
      <link>https://zhixiangyuan.github.io/2019/10/29/mysql-%E6%95%B0%E5%80%BC%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0/</link>
      <pubDate>Tue, 29 Oct 2019 10:04:43 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/29/mysql-%E6%95%B0%E5%80%BC%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0/</guid>
      <description>1 数值处理函数 函数 说明 Abs(&amp;lt;number&amp;gt;) 返回一个数的绝对值 Exp(&amp;lt;number&amp;gt;) 返回一个数的指数值，等同于 \(e^{[number]}\) Mod(&amp;lt;number1&amp;gt;, &amp;lt;number2&amp;gt;) 返回除操作的余数 Pi() 返回圆周率 Rand() 返回一个随机数，范围在 [0,1) Cos(&amp;lt;number&amp;gt;) 返回一个</description>
    </item>
    
    <item>
      <title>MySQL 日期和时间处理函数</title>
      <link>https://zhixiangyuan.github.io/2019/10/28/mysql-%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0/</link>
      <pubDate>Mon, 28 Oct 2019 20:37:26 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/28/mysql-%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0/</guid>
      <description>1 日期和时间处理函数 函数 说明 Date(&amp;lt;field&amp;gt;) 返回日期时间的日期部分 Time(&amp;lt;field&amp;gt;) 返回一个日期时间的时间部分 Year(&amp;lt;field&amp;gt;) 返回一个日期的年份部分 Month(&amp;lt;field&amp;gt;) 返回一个日期的月份部分 Day(&amp;lt;field&amp;gt;) 返回一个日</description>
    </item>
    
    <item>
      <title>MySQL 控制以及查看状态的命令</title>
      <link>https://zhixiangyuan.github.io/2019/10/28/mysql-%E6%8E%A7%E5%88%B6%E4%BB%A5%E5%8F%8A%E6%9F%A5%E7%9C%8B%E7%8A%B6%E6%80%81%E7%9A%84%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Mon, 28 Oct 2019 18:19:32 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/28/mysql-%E6%8E%A7%E5%88%B6%E4%BB%A5%E5%8F%8A%E6%9F%A5%E7%9C%8B%E7%8A%B6%E6%80%81%E7%9A%84%E5%91%BD%E4%BB%A4/</guid>
      <description>1 一组 SHOW 命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64</description>
    </item>
    
    <item>
      <title>MySQL 文本处理函数</title>
      <link>https://zhixiangyuan.github.io/2019/10/28/mysql-%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0/</link>
      <pubDate>Mon, 28 Oct 2019 15:32:01 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/28/mysql-%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0/</guid>
      <description>1 文本处理函数 函数 说明 Left(&amp;lt;field&amp;gt;, &amp;lt;length&amp;gt;) 返回字符串左边的字符 Right(&amp;lt;field&amp;gt;, &amp;lt;length&amp;gt;) 返回字符串右边的字符 Length(&amp;lt;field&amp;gt;) 返回字符串的长度 Locate(&amp;lt;subStr&amp;gt;, &amp;lt;field&amp;gt;) 找出字符串的一个子串 Lower(&amp;lt;field&amp;gt;) 将字符串转换为小写 Upper(&amp;lt;field&amp;gt;) 将字符</description>
    </item>
    
    <item>
      <title>MySQL SELECT 的使用</title>
      <link>https://zhixiangyuan.github.io/2019/10/28/mysql-select-%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 28 Oct 2019 09:53:55 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/28/mysql-select-%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>1 SELECT 命令浅析 1 2 3 4 5 6 7 8 9 10 # 检索单列数据 mysql&amp;gt; SELECT &amp;lt;field&amp;gt; FROM &amp;lt;table&amp;gt;; # 检索多列数据，列与列之间用 &amp;#39;,&amp;#39; 隔开即可 # 注意：最后一个列名后面不需要加逗号 mysql&amp;gt; SELECT &amp;lt;field&amp;gt;,&amp;lt;field&amp;gt; FROM &amp;lt;table&amp;gt;;</description>
    </item>
    
    <item>
      <title>MySQL 三大引擎</title>
      <link>https://zhixiangyuan.github.io/2019/10/27/mysql-%E4%B8%89%E5%A4%A7%E5%BC%95%E6%93%8E/</link>
      <pubDate>Sun, 27 Oct 2019 11:16:36 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/27/mysql-%E4%B8%89%E5%A4%A7%E5%BC%95%E6%93%8E/</guid>
      <description>MySQL 常用的引擎有 InnoDB、MyISAM、Memory，默认是 InnoDB 1 InnoDB 这种引擎序列化在磁盘中，支持事务，支持行级锁，B+Tree 索引。拥有良好</description>
    </item>
    
    <item>
      <title>数据库事务小记</title>
      <link>https://zhixiangyuan.github.io/2018/11/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E5%B0%8F%E8%AE%B0/</link>
      <pubDate>Sat, 24 Nov 2018 14:30:14 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2018/11/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E5%B0%8F%E8%AE%B0/</guid>
      <description>1 为什么会有数据库事务 数据库在没有事务的情况下进行读写，可能出现脏读、不可重复读与幻读三种异常，而为了解决这三种异常，便引出了数据库事务，首</description>
    </item>
    
  </channel>
</rss>