<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on 养猪场</title>
    <link>https://zhixiangyuan.github.io/tags/linux/</link>
    <description>Recent content in Linux on 养猪场</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>yuanzx</copyright>
    <lastBuildDate>Thu, 27 Feb 2020 14:39:57 +0800</lastBuildDate>
    
	<atom:link href="https://zhixiangyuan.github.io/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>查看最常使用的 10 条 linux 命令</title>
      <link>https://zhixiangyuan.github.io/2020/02/27/%E6%9F%A5%E7%9C%8B%E6%9C%80%E5%B8%B8%E4%BD%BF%E7%94%A8%E7%9A%84-10-%E6%9D%A1-linux-%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Thu, 27 Feb 2020 14:39:57 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2020/02/27/%E6%9F%A5%E7%9C%8B%E6%9C%80%E5%B8%B8%E4%BD%BF%E7%94%A8%E7%9A%84-10-%E6%9D%A1-linux-%E5%91%BD%E4%BB%A4/</guid>
      <description>在终端中输入如下命令即可看到您最常使用的 10 条命令 1 2 3 4 5 6 7 8 9 10 11 12 13 $&amp;gt; history | awk &amp;#39;{print $2}&amp;#39; | sort | uniq -c | sort -rn | head -10 # 下面是我的输出结果 1432 cd 1384 git 1250 ll</description>
    </item>
    
    <item>
      <title>/etc/passwd</title>
      <link>https://zhixiangyuan.github.io/2020/02/27/etc/passwd/</link>
      <pubDate>Thu, 27 Feb 2020 10:51:01 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2020/02/27/etc/passwd/</guid>
      <description>该文件用于存放用户的一些信息，文件中的每一行便是一个用户的信息，每种信息之间用 : 进行分隔。总共有七种信息，下面的例子是我系统中 root 的信息，每种</description>
    </item>
    
    <item>
      <title>单台服务器可以支撑多少的 tcp 连接</title>
      <link>https://zhixiangyuan.github.io/2020/02/01/%E5%8D%95%E5%8F%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%AF%E4%BB%A5%E6%94%AF%E6%92%91%E5%A4%9A%E5%B0%91%E7%9A%84-tcp-%E8%BF%9E%E6%8E%A5/</link>
      <pubDate>Sat, 01 Feb 2020 14:28:22 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2020/02/01/%E5%8D%95%E5%8F%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%AF%E4%BB%A5%E6%94%AF%E6%92%91%E5%A4%9A%E5%B0%91%E7%9A%84-tcp-%E8%BF%9E%E6%8E%A5/</guid>
      <description>一般我们都是在 Linux 系统下使用服务端，那么这个问题主要和 linux 系统挂钩。 从理论上 tcp 连接与四元组有关，那么只有四元组当中的一项发生改变，那么便可以建立</description>
    </item>
    
    <item>
      <title>Shell 中的 ``、$()、${} 和 $(())</title>
      <link>https://zhixiangyuan.github.io/2019/11/17/shell-%E4%B8%AD%E7%9A%84-%E5%92%8C/</link>
      <pubDate>Sun, 17 Nov 2019 21:30:01 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/11/17/shell-%E4%B8%AD%E7%9A%84-%E5%92%8C/</guid>
      <description>1 ${} 这个符号用于变量替换 2 `` 和 $() 这两个都用于命令替换，意思就是他们两个里面写的东西会当成命令执行。 `` 所有的系统都支持，$() 可能会有系统不支</description>
    </item>
    
    <item>
      <title>通过文件描述符查找进程监听的端口号</title>
      <link>https://zhixiangyuan.github.io/2019/11/13/%E9%80%9A%E8%BF%87%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6%E6%9F%A5%E6%89%BE%E8%BF%9B%E7%A8%8B%E7%9B%91%E5%90%AC%E7%9A%84%E7%AB%AF%E5%8F%A3%E5%8F%B7/</link>
      <pubDate>Wed, 13 Nov 2019 22:07:32 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/11/13/%E9%80%9A%E8%BF%87%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6%E6%9F%A5%E6%89%BE%E8%BF%9B%E7%A8%8B%E7%9B%91%E5%90%AC%E7%9A%84%E7%AB%AF%E5%8F%A3%E5%8F%B7/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 # 首先，我们通过开启监听</description>
    </item>
    
    <item>
      <title>lsof 小记</title>
      <link>https://zhixiangyuan.github.io/2019/11/13/lsof-%E5%B0%8F%E8%AE%B0/</link>
      <pubDate>Wed, 13 Nov 2019 21:32:47 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/11/13/lsof-%E5%B0%8F%E8%AE%B0/</guid>
      <description>1 2 3 4 5 6 7 # 查看端口被什么进程占用 # -n 表示不将 IP 转换为 hostname # -P 表示不将 port number 转换为 service name $&amp;gt; lsof -n -P -i:&amp;lt;$port&amp;gt; # 查看进程监听了哪些端口号 $&amp;gt; lsof -n -P -p &amp;lt;$pid&amp;gt; | grep TCP</description>
    </item>
    
    <item>
      <title>netstat 命令小记</title>
      <link>https://zhixiangyuan.github.io/2019/11/13/netstat-%E5%91%BD%E4%BB%A4%E5%B0%8F%E8%AE%B0/</link>
      <pubDate>Wed, 13 Nov 2019 16:42:22 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/11/13/netstat-%E5%91%BD%E4%BB%A4%E5%B0%8F%E8%AE%B0/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 # 只列出 TCP 套接字 # -t 选项可以只列出 TCP 的套接字，也可也用 --tcp $&amp;gt; netstat -at # 只列出 UDP 连接 #</description>
    </item>
    
    <item>
      <title>netcat 命令小记</title>
      <link>https://zhixiangyuan.github.io/2019/11/13/netcat-%E5%91%BD%E4%BB%A4%E5%B0%8F%E8%AE%B0/</link>
      <pubDate>Wed, 13 Nov 2019 16:21:11 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/11/13/netcat-%E5%91%BD%E4%BB%A4%E5%B0%8F%E8%AE%B0/</guid>
      <description>netcat 因为功能强大，被称为网络工具中的瑞士军刀，nc 是 netcat 的简称。 1 2 3 4 5 6 7 8 9 10 11 12 # -l 参数表示 nc 将监听某个端口 # -p 表示监听的端口号为 $port $&amp;gt; nc</description>
    </item>
    
    <item>
      <title>通过 ssh 配置公网主机端口到内网主机端口的映射</title>
      <link>https://zhixiangyuan.github.io/2019/11/13/%E9%80%9A%E8%BF%87-ssh-%E9%85%8D%E7%BD%AE%E5%85%AC%E7%BD%91%E4%B8%BB%E6%9C%BA%E7%AB%AF%E5%8F%A3%E5%88%B0%E5%86%85%E7%BD%91%E4%B8%BB%E6%9C%BA%E7%AB%AF%E5%8F%A3%E7%9A%84%E6%98%A0%E5%B0%84/</link>
      <pubDate>Wed, 13 Nov 2019 14:33:39 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/11/13/%E9%80%9A%E8%BF%87-ssh-%E9%85%8D%E7%BD%AE%E5%85%AC%E7%BD%91%E4%B8%BB%E6%9C%BA%E7%AB%AF%E5%8F%A3%E5%88%B0%E5%86%85%E7%BD%91%E4%B8%BB%E6%9C%BA%E7%AB%AF%E5%8F%A3%E7%9A%84%E6%98%A0%E5%B0%84/</guid>
      <description>1 公网主机的配置修改 ssh 连接到公网主机，修改 sshd 的配置文件 /etc/ssh/sshd_config，在配置文件中找到 #GatewayPorts no 将其改为 GatewayPorts yes，如果没</description>
    </item>
    
    <item>
      <title>标准输入、标准输出与标准错误输出</title>
      <link>https://zhixiangyuan.github.io/2019/11/09/%E6%A0%87%E5%87%86%E8%BE%93%E5%85%A5%E6%A0%87%E5%87%86%E8%BE%93%E5%87%BA%E4%B8%8E%E6%A0%87%E5%87%86%E9%94%99%E8%AF%AF%E8%BE%93%E5%87%BA/</link>
      <pubDate>Sat, 09 Nov 2019 16:50:59 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/11/09/%E6%A0%87%E5%87%86%E8%BE%93%E5%85%A5%E6%A0%87%E5%87%86%E8%BE%93%E5%87%BA%E4%B8%8E%E6%A0%87%E5%87%86%E9%94%99%E8%AF%AF%E8%BE%93%E5%87%BA/</guid>
      <description>符号 含义 0 标准输入 1 标准输出 2 标准错误输出 0&amp;lt; 从标准输入中获取 1&amp;gt;&amp;lt;xxx&amp;gt; 将标准输出传输到 &amp;lt;xxx&amp;gt; 2&amp;gt;&amp;lt;xxx&amp;gt; 将标准错误输出输出到 &amp;lt;xxx&amp;gt; &amp;amp;&amp;gt;&amp;lt;xxx&amp;gt; 将标准输出和标准错误输出输出到 &amp;lt;xxx&amp;gt; /dev/null</description>
    </item>
    
    <item>
      <title>Shell 脚本的参数传递</title>
      <link>https://zhixiangyuan.github.io/2019/11/07/shell-%E8%84%9A%E6%9C%AC%E7%9A%84%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92/</link>
      <pubDate>Thu, 07 Nov 2019 09:10:09 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/11/07/shell-%E8%84%9A%E6%9C%AC%E7%9A%84%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92/</guid>
      <description>1 Shell 编程中的参数引用 引用参数 描述 0, 1, 2&amp;hellip; 传递给脚本的参数位置，可以理解为传递进去的参数是个数组，通过数组下标取得参数 * 显示所有向脚本传递的参数</description>
    </item>
    
    <item>
      <title>Unset 命令</title>
      <link>https://zhixiangyuan.github.io/2019/11/06/unset-%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Wed, 06 Nov 2019 11:59:46 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/11/06/unset-%E5%91%BD%E4%BB%A4/</guid>
      <description>1 2 3 4 5 6 7 # 删除某个变量 $&amp;gt; unset &amp;lt;$变量名&amp;gt; # 或 $&amp;gt; unset -v &amp;lt;$变量名&amp;gt; # 删除某个函数 $&amp;gt; unset -f &amp;lt;$函数名&amp;gt; 案例：</description>
    </item>
    
    <item>
      <title>Env 命令</title>
      <link>https://zhixiangyuan.github.io/2019/11/06/env-%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Wed, 06 Nov 2019 11:44:09 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/11/06/env-%E5%91%BD%E4%BB%A4/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 # 输出所有的环境变量 $&amp;gt; env # 删除某个环境变量 # 运行某个命令在指定的环境变量下 $&amp;gt; env -u &amp;lt;$环境变量&amp;gt; [运行的命令]</description>
    </item>
    
    <item>
      <title>常见的环境变量</title>
      <link>https://zhixiangyuan.github.io/2019/11/06/%E5%B8%B8%E8%A7%81%E7%9A%84%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</link>
      <pubDate>Wed, 06 Nov 2019 11:12:45 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/11/06/%E5%B8%B8%E8%A7%81%E7%9A%84%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</guid>
      <description>变量名 描述 HOME 用户的专属目录，在 linux 中用 ~ 扩展 PATH 外部命令的搜索路径 HISTSIZE 保存历史命令记录的条数 LOGNAME 当前用户的登录名 HOSTNAME 主机的名称，许多应用程序如果要用到</description>
    </item>
    
    <item>
      <title>Bash 启动时和登出时会运行的文件</title>
      <link>https://zhixiangyuan.github.io/2019/11/06/bash-%E5%90%AF%E5%8A%A8%E6%97%B6%E5%92%8C%E7%99%BB%E5%87%BA%E6%97%B6%E4%BC%9A%E8%BF%90%E8%A1%8C%E7%9A%84%E6%96%87%E4%BB%B6/</link>
      <pubDate>Wed, 06 Nov 2019 11:01:55 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/11/06/bash-%E5%90%AF%E5%8A%A8%E6%97%B6%E5%92%8C%E7%99%BB%E5%87%BA%E6%97%B6%E4%BC%9A%E8%BF%90%E8%A1%8C%E7%9A%84%E6%96%87%E4%BB%B6/</guid>
      <description>启动文件/登出文件 描述 /etc/profile 系统范围的默认值，大部分用来设置环境（所有由 sh 衍生出的 shell 均适用） /etc/bashrc 特定于 Bash 的，系统范围函数于别名 $HOME/.bash_profile 用户定义的，环境默</description>
    </item>
    
    <item>
      <title>Export 命令</title>
      <link>https://zhixiangyuan.github.io/2019/11/06/export-%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Wed, 06 Nov 2019 10:50:16 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/11/06/export-%E5%91%BD%E4%BB%A4/</guid>
      <description>1 语法 export [-fnp] [{$变量名称}={$变量的值}] 2 命令作用 设置环境变量，使用 export 设置的环境变量仅改变当前进程的环境，当前进程销毁则设置的环境变量失</description>
    </item>
    
    <item>
      <title>Echo 支持的转义字符</title>
      <link>https://zhixiangyuan.github.io/2019/11/06/echo-%E6%94%AF%E6%8C%81%E7%9A%84%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6/</link>
      <pubDate>Wed, 06 Nov 2019 09:51:39 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/11/06/echo-%E6%94%AF%E6%8C%81%E7%9A%84%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6/</guid>
      <description>echo 需要加上 -e 才能够处理转义字符 转义字符 含义 \a 报警符，计算机会发出一声报警音 \b 退格符（Backspace） \c 禁止尾随，这个字符后面的所有字符都</description>
    </item>
    
    <item>
      <title>Shell 中的变量</title>
      <link>https://zhixiangyuan.github.io/2019/11/05/shell-%E4%B8%AD%E7%9A%84%E5%8F%98%E9%87%8F/</link>
      <pubDate>Tue, 05 Nov 2019 23:42:07 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/11/05/shell-%E4%B8%AD%E7%9A%84%E5%8F%98%E9%87%8F/</guid>
      <description>1 变量的名称 shell 变量的名称以字母或下划线开始，后面可以接任意长度的字母、数字或下划线。 2 获取变量值 使用 $ 来获取变量值，如 $var，这种表示方式</description>
    </item>
    
    <item>
      <title>Shell 中的 #!</title>
      <link>https://zhixiangyuan.github.io/2019/11/05/shell-%E4%B8%AD%E7%9A%84-/</link>
      <pubDate>Tue, 05 Nov 2019 23:22:09 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/11/05/shell-%E4%B8%AD%E7%9A%84-/</guid>
      <description>1 #! 的作用 它的作用便是高所 shell 使用什么进程来执行此脚本 2 例子 2.1 echo Hello world 1 2 #!/bin/bash echo &amp;#34;Hello world!&amp;#34; 2.2 python 的 Hello world 1 2 #!/usr/bin/python print &amp;#34;Hello world!&amp;#34; 2.3 只会删除自己的脚本 1 2 3 #!/bin/rm # 这个 Hello world 打</description>
    </item>
    
    <item>
      <title>Shell 执行文件的三种方式</title>
      <link>https://zhixiangyuan.github.io/2019/11/05/shell-%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Tue, 05 Nov 2019 23:07:50 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/11/05/shell-%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/</guid>
      <description>1 Shell 执行文件的三种方式 使文件具有可执行权限，直接运行文件 直接调用命令解释器执行文件，如 sh、bash 使用 source 执行文件 1.1 前两种执行文件的方式 前两</description>
    </item>
    
    <item>
      <title>反斜杠 r 与 反斜杠 n 的含义</title>
      <link>https://zhixiangyuan.github.io/2019/10/31/%E5%8F%8D%E6%96%9C%E6%9D%A0-r-%E4%B8%8E-%E5%8F%8D%E6%96%9C%E6%9D%A0-n-%E7%9A%84%E5%90%AB%E4%B9%89/</link>
      <pubDate>Thu, 31 Oct 2019 20:39:40 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/31/%E5%8F%8D%E6%96%9C%E6%9D%A0-r-%E4%B8%8E-%E5%8F%8D%E6%96%9C%E6%9D%A0-n-%E7%9A%84%E5%90%AB%E4%B9%89/</guid>
      <description>1 \r \n 的来历 在计算机还没有出现之前，有一种叫做电传打自己的东西，每秒钟可以打 10 个字符，每个字符 0.1 秒，但是他有一个问题，就是换行的时候需要 0.2 秒</description>
    </item>
    
    <item>
      <title>Linux 中的系统调用</title>
      <link>https://zhixiangyuan.github.io/2019/10/14/linux-%E4%B8%AD%E7%9A%84%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/</link>
      <pubDate>Mon, 14 Oct 2019 10:05:02 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/14/linux-%E4%B8%AD%E7%9A%84%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/</guid>
      <description>1 系统调用 fork: 创建进程 execve: 执行任务 waitpid: 通过将子进程的进程号传给它来了解子进程运行是否完成，是否成功 brk: 分配一块与原来堆数据连在一起的内存空间 mmap: 分配一</description>
    </item>
    
    <item>
      <title>Shell 中的字符串处理</title>
      <link>https://zhixiangyuan.github.io/2019/10/13/shell-%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/</link>
      <pubDate>Sun, 13 Oct 2019 19:27:09 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/13/shell-%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/</guid>
      <description>1 字符串截取 使用 %、# 实现字符串截取 1.1 % ${variable%pattern}，这种模式时，shell 在 variable 中查找，看它是否以给的模式 pattern 结尾，</description>
    </item>
    
    <item>
      <title>Shell 中的三目运算符</title>
      <link>https://zhixiangyuan.github.io/2019/10/13/shell-%E4%B8%AD%E7%9A%84%E4%B8%89%E7%9B%AE%E8%BF%90%E7%AE%97%E7%AC%A6/</link>
      <pubDate>Sun, 13 Oct 2019 19:01:27 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/13/shell-%E4%B8%AD%E7%9A%84%E4%B8%89%E7%9B%AE%E8%BF%90%E7%AE%97%E7%AC%A6/</guid>
      <description>shell 中的三目运算符有四种，分别是 :-、:+、:=、:?，下面分别举例 1 :- ${var:-string} 对于这种表达式表示若 $var 为空则使用 string 替换 ${var:-string}，</description>
    </item>
    
    <item>
      <title>Linux 基础</title>
      <link>https://zhixiangyuan.github.io/2019/10/12/linux-%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Sat, 12 Oct 2019 13:04:55 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/12/linux-%E5%9F%BA%E7%A1%80/</guid>
      <description>useradd 1 2 3 4 5 # 新建用户 $&amp;gt; useradd &amp;lt;usrename&amp;gt; # 新建用户，并将用户加入指定的组 # 组名必须存在，否则会提示不存在 $&amp;gt; useradd &amp;lt;username&amp;gt; -g &amp;lt;groupname&amp;gt; passwd 1 2 3 4 # 更改当前用户的密码 $&amp;gt; passwd # 更</description>
    </item>
    
    <item>
      <title>命令行潜规则</title>
      <link>https://zhixiangyuan.github.io/2019/10/10/%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%BD%9C%E8%A7%84%E5%88%99/</link>
      <pubDate>Thu, 10 Oct 2019 16:33:08 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/10/10/%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%BD%9C%E8%A7%84%E5%88%99/</guid>
      <description>本文所述的内容适用于本博客的标记方式 符号 含义 尖括号 &amp;lt;&amp;gt; 必选参数，实际使用时应将其替换为所需要的参数 方括号 [] 可选参数，实际使用时应将其替换为所需</description>
    </item>
    
    <item>
      <title>Centos 配置无密登录</title>
      <link>https://zhixiangyuan.github.io/2019/01/17/centos-%E9%85%8D%E7%BD%AE%E6%97%A0%E5%AF%86%E7%99%BB%E5%BD%95/</link>
      <pubDate>Thu, 17 Jan 2019 20:34:37 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/01/17/centos-%E9%85%8D%E7%BD%AE%E6%97%A0%E5%AF%86%E7%99%BB%E5%BD%95/</guid>
      <description>生成密钥方法 ssh-keygen -t rsa // 一路回车 cat id_rsa.pub &amp;gt;&amp;gt; authorized_keys 配置权限 chmod 700 /home/hadoop chmod 700 -R ~/.ssh chmod 600 authorized_keys</description>
    </item>
    
    <item>
      <title>关于 sshd 的坑</title>
      <link>https://zhixiangyuan.github.io/2019/01/16/%E5%85%B3%E4%BA%8E-sshd-%E7%9A%84%E5%9D%91/</link>
      <pubDate>Wed, 16 Jan 2019 20:30:59 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/01/16/%E5%85%B3%E4%BA%8E-sshd-%E7%9A%84%E5%9D%91/</guid>
      <description>1 sshd 死都打不开 试试先用 /usr/sbin/sshd stop 关掉再 start 看看行不行 莫名其妙，直接运行 /usr/sbin/sshd 就好了 1.1 开启 sshd /usr/sbin/sshd start 1.2 sshd 的配置文件权限必须在 root 下为 600 才行 配置文件在 /etc/ssh 目录下，目</description>
    </item>
    
    <item>
      <title>Sftp 命令小记</title>
      <link>https://zhixiangyuan.github.io/2019/01/14/sftp-%E5%91%BD%E4%BB%A4%E5%B0%8F%E8%AE%B0/</link>
      <pubDate>Mon, 14 Jan 2019 20:26:53 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/01/14/sftp-%E5%91%BD%E4%BB%A4%E5%B0%8F%E8%AE%B0/</guid>
      <description>sftp 命令会先连接到服务器，然后再下载文件 登陆命令 sftp &amp;lt;username&amp;gt;@&amp;lt;ip&amp;gt; 下载命令 递归下载 `get -r &amp;lt;$文件&amp;gt; &amp;lt;$本地路径&amp;gt;</description>
    </item>
    
    <item>
      <title>Linux 下误删 Secure 文件，系统不记录日志问题</title>
      <link>https://zhixiangyuan.github.io/2019/01/13/linux-%E4%B8%8B%E8%AF%AF%E5%88%A0-secure-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E4%B8%8D%E8%AE%B0%E5%BD%95%E6%97%A5%E5%BF%97%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sun, 13 Jan 2019 20:16:21 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2019/01/13/linux-%E4%B8%8B%E8%AF%AF%E5%88%A0-secure-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E4%B8%8D%E8%AE%B0%E5%BD%95%E6%97%A5%E5%BF%97%E9%97%AE%E9%A2%98/</guid>
      <description>第一步创建文件 touch /var/log/secure 第二步修改权限 chmod 600 /var/log/secure 第三步重启服务 service sshd restart service syslog(rsyslog) restart 注意：如果不重启服务的话，原来的程序依然向被删除的文件中写入数据，那么新建的</description>
    </item>
    
    <item>
      <title>sed 小记</title>
      <link>https://zhixiangyuan.github.io/2018/10/04/sed-%E5%B0%8F%E8%AE%B0/</link>
      <pubDate>Thu, 04 Oct 2018 16:21:59 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2018/10/04/sed-%E5%B0%8F%E8%AE%B0/</guid>
      <description>1 sed 的工作流程 sed 逐行处理文件或输入，默认不会修改文件，除非使用 shell 重定向保存结果。 工作流程： 将正在处理的行保存在一个临时缓存区中（也称为模式空</description>
    </item>
    
    <item>
      <title>grep 小记</title>
      <link>https://zhixiangyuan.github.io/2018/09/25/grep-%E5%B0%8F%E8%AE%B0/</link>
      <pubDate>Tue, 25 Sep 2018 15:02:04 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2018/09/25/grep-%E5%B0%8F%E8%AE%B0/</guid>
      <description>grep -A [line num]，向下显示多少行，after-context 缩写 -B [line num]，向上显示多少行，before-context 缩写 -C [line num]，上</description>
    </item>
    
    <item>
      <title>tar &amp; scp 小记</title>
      <link>https://zhixiangyuan.github.io/2018/09/24/tar-scp-%E5%B0%8F%E8%AE%B0/</link>
      <pubDate>Mon, 24 Sep 2018 17:35:38 +0800</pubDate>
      
      <guid>https://zhixiangyuan.github.io/2018/09/24/tar-scp-%E5%B0%8F%E8%AE%B0/</guid>
      <description>1 scp 命令 上传：scp [文件路径] [用户名]@[IP 地址]:[服务器路径] 下载：scp [用户名]@[IP 地址]:[文件路径] [本地路径] 2 tar 命</description>
    </item>
    
  </channel>
</rss>